package Week_08;

/**
 * 191. 位1的个数
 *
 * 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
 *
 * 示例 1：
 *
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 示例 2：
 *
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
 * 示例 3：
 *
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 *  
 *
 * 提示：
 *
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/number-of-1-bits
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author zhujiang.cheng
 * @since 2020/8/16
 */
public class NumberOf1Bits_191 {

    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        // Clarification: 无符号整数，返回二进制中1的个数
        // 时间复杂度: O(1)
        // 空间复杂度: O(1)

        // 方案1 位运算 右移
        int moves = 31;
        int count = 0;
        while (moves >= 0) {
            if ((n & 0x1) == 0x1) {
                count++;
            }
            n = n >> 1;
            moves--;
        }

        return count;
    }

    public int hammingWeightTwo(int n) {
        // 方案2 位运算 掩码左移
        // 时间复杂度: O(1)
        // 空间复杂度: O(1)

        int count = 0, mask = 1;

        for (int i = 0; i < 32; i++) {
            // 如果 & 的结果为1，则该位置上的数为1
            if ((n & mask) != 0) {
                count++;
            }
            // 掩码左移一位，去匹配更高位的数
            mask <<= 1;
        }

        return count;
    }

    public int hammingWeightThree(int n) {
        // 方案3 位运算 不断把数字最后一个 1 反转，并把答案加一，当数字变为0的时候，就知道它没有1的位了
        // 时间复杂度: O(1)
        // 空间复杂度: O(1)

        int count = 0;
        while (n != 0) {
            count++;
            n &= (n - 1);
        }

        return count;
    }
}
