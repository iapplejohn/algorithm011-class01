package Week_07;

import java.util.HashMap;

/**
 * 36. 有效的数独
 *
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 *
 *
 * 上图是一个部分填充的有效的数独。
 *
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1:
 *
 * 输入:
 * [
 *   ["5","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * 示例 2:
 *
 * 输入:
 * [
 *   ["8","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/valid-sudoku
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author zhujiang.cheng
 * @since 2020/8/8
 */
public class ValidSudoku_36 {

    public boolean isValidSudoku(char[][] board) {
        // Clarification: 是否有效数独: 每行、每列、3*3子数独不重复，数独有空的地方
        // 方案1: 一次迭代，记录每行、每列、3*3子数独是否有重复数字
        // 使用 Map数组 来记录，元素：位置，键：数字，值：出现的次数

        // 9行、9列、9个子数独，分别用HashMap 数组表示
        HashMap<Integer, Integer>[] rows = new HashMap[9];
        HashMap<Integer, Integer>[] cols = new HashMap[9];
        HashMap<Integer, Integer>[] subs = new HashMap[9];

        // 初始化
        for (int i = 0; i < 9; i++) {
            rows[i] = new HashMap<>(16);
            cols[i] = new HashMap<>(16);
            subs[i] = new HashMap<>(16);
        }

        // 遍历每个位置
        for (int r = 0; r < 9; r++) {
            for (int c = 0; c < 9; c++) {
                char ch = board[r][c];
                if (ch != '.') {
                    int num = (int) ch;
                    // 子数独的索引
                    int b = (r / 3) * 3 + c / 3;

                    Integer rCount = rows[r].getOrDefault(num, 0) + 1;
                    Integer cCount = cols[c].getOrDefault(num, 0) + 1;
                    Integer sCount = subs[b].getOrDefault(num, 0) + 1;
                    rows[r].put(num, rCount);
                    cols[c].put(num, cCount);
                    subs[b].put(num, sCount);

                    // 行、列或子数独存在重复的数字
                    if (rCount > 1 || cCount > 1 || sCount > 1) {
                        return false;
                    }
                }
            }
        }

        return true;
    }

}
